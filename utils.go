package main

import (
	"fmt"
	"math"

	"github.com/umahmood/haversine"
)

// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞—Å–∞
const (
	DirectionNorth     = "–°–µ–≤–µ—Ä"
	DirectionNorthEast = "–°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫"
	DirectionEast      = "–í–æ—Å—Ç–æ–∫"
	DirectionSouthEast = "–Æ–≥–æ-–≤–æ—Å—Ç–æ–∫"
	DirectionSouth     = "–Æ–≥"
	DirectionSouthWest = "–Æ–≥–æ-–∑–∞–ø–∞–¥"
	DirectionWest      = "–ó–∞–ø–∞–¥"
	DirectionNorthWest = "–°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥"
)

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö
func calculateDistance(lat1, lon1, lat2, lon2 float64) float64 {
	_, km := haversine.Distance(haversine.Coord{Lat: lat1, Lon: lon1}, haversine.Coord{Lat: lat2, Lon: lon2})
	return km
}

// –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
func calculateDistanceMeters(lat1, lon1, lat2, lon2 float64) int {
	km := calculateDistance(lat1, lon1, lat2, lon2)
	return int(km * 1000)
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫ —Ü–µ–ª–∏
func calculateDirection(fromLat, fromLon, toLat, toLon float64) string {
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
	fromLatRad := fromLat * math.Pi / 180
	fromLonRad := fromLon * math.Pi / 180
	toLatRad := toLat * math.Pi / 180
	toLonRad := toLon * math.Pi / 180

	// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –¥–æ–ª–≥–æ—Ç
	deltaLon := toLonRad - fromLonRad

	// –í—ã—á–∏—Å–ª—è–µ–º –∞–∑–∏–º—É—Ç
	y := math.Sin(deltaLon) * math.Cos(toLatRad)
	x := math.Cos(fromLatRad)*math.Sin(toLatRad) - math.Sin(fromLatRad)*math.Cos(toLatRad)*math.Cos(deltaLon)

	bearing := math.Atan2(y, x)

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–¥—É—Å—ã
	bearingDegrees := bearing * 180 / math.Pi

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-360 –≥—Ä–∞–¥—É—Å–∞–º
	if bearingDegrees < 0 {
		bearingDegrees += 360
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–ø–∞—Å—É
	return degreesToDirection(bearingDegrees)
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≥—Ä–∞–¥—É—Å–æ–≤ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞—Å–∞
func degreesToDirection(degrees float64) string {
	directions := []string{
		DirectionNorth,     // 0¬∞
		DirectionNorthEast, // 45¬∞
		DirectionEast,      // 90¬∞
		DirectionSouthEast, // 135¬∞
		DirectionSouth,     // 180¬∞
		DirectionSouthWest, // 225¬∞
		DirectionWest,      // 270¬∞
		DirectionNorthWest, // 315¬∞
	}

	// –î–æ–±–∞–≤–ª—è–µ–º 22.5 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
	index := int((degrees+22.5)/45) % 8
	return directions[index]
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
func getDirectionArrow(direction string) string {
	arrows := map[string]string{
		DirectionNorth:     "‚¨ÜÔ∏è",
		DirectionNorthEast: "‚ÜóÔ∏è",
		DirectionEast:      "‚û°Ô∏è",
		DirectionSouthEast: "‚ÜòÔ∏è",
		DirectionSouth:     "‚¨áÔ∏è",
		DirectionSouthWest: "‚ÜôÔ∏è",
		DirectionWest:      "‚¨ÖÔ∏è",
		DirectionNorthWest: "‚ÜñÔ∏è",
	}

	if arrow, exists := arrows[direction]; exists {
		return arrow
	}
	return "üìç"
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
func formatDirectionMessage(fromLat, fromLon, toLat, toLon float64) string {
	distance := calculateDistanceMeters(fromLat, fromLon, toLat, toLon)
	direction := calculateDirection(fromLat, fromLon, toLat, toLon)
	arrow := getDirectionArrow(direction)

	var distanceText string
	if distance >= 1000 {
		distanceText = fmt.Sprintf("%.1f –∫–º", float64(distance)/1000)
	} else {
		distanceText = fmt.Sprintf("%d –º", distance)
	}

	return fmt.Sprintf("%s %s\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: %s", arrow, direction, distanceText)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–∏
func isTargetReached(fromLat, fromLon, toLat, toLon float64, targetDistance float64) bool {
	distance := calculateDistance(fromLat, fromLon, toLat, toLon) * 1000 // –≤ –º–µ—Ç—Ä–∞—Ö
	return distance <= targetDistance
}
