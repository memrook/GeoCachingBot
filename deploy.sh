#!/bin/bash

# GeoCaching Bot - Deploy Script
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [build|start|stop|restart|logs|status]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
check_env() {
    if [ ! -f ".env" ]; then
        error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:"
        echo "cp env.example .env"
        echo "nano .env"
        echo ""
        echo "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ:"
        echo "  BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–æ—Ç_BotFather"
        echo "  ADMIN_ID=–≤–∞—à_telegram_user_id"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if ! grep -q "BOT_TOKEN=" .env || ! grep -q "^BOT_TOKEN=.*[^[:space:]]" .env; then
        error "BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!"
        echo "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:"
        echo "BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"
        exit 1
    fi
    
    if ! grep -q -E "(ADMIN_ID=|ADMIN_IDS=)" .env; then
        error "ADMIN_ID –∏–ª–∏ ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!"
        echo "–ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à User ID –æ—Ç @userinfobot –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:"
        echo "ADMIN_ID=–≤–∞—à_telegram_user_id"
        exit 1
    fi
    
    log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
}

# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞
setup_env() {
    if [ -f ".env" ]; then
        warn "–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
            return
        fi
    fi
    
    log "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
    cp env.example .env
    
    echo
    echo "üìù –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env —Ñ–∞–π–ª–µ:"
    echo
    echo "1. BOT_TOKEN - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç @BotFather:"
    echo "   https://t.me/BotFather ‚Üí /newbot"
    echo
    echo "2. ADMIN_ID - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç @userinfobot:"
    echo "   https://t.me/userinfobot ‚Üí –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    echo
    
    if command -v nano >/dev/null 2>&1; then
        read -p "–û—Ç–∫—Ä—ã—Ç—å .env –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ nano? (Y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            nano .env
        fi
    else
        echo "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º"
    fi
    
    log "‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: ./deploy.sh start"
}

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
create_dirs() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    mkdir -p data logs
    chmod 755 data logs
}

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
build() {
    local dockerfile=${1:-"Dockerfile"}
    local no_cache=${2:-""}
    
    log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ —Å $dockerfile..."
    
    if [ "$no_cache" = "--no-cache" ]; then
        DOCKERFILE=$dockerfile docker-compose build --no-cache
    else
        DOCKERFILE=$dockerfile docker-compose build
    fi
    
    log "–û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω!"
}

# –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞
build_fast() {
    log "–ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º..."
    build "Dockerfile" ""
}

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞
build_optimized() {
    log "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞..."
    build "Dockerfile.optimized" ""
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start() {
    check_env
    create_dirs
    log "–ó–∞–ø—É—Å–∫ GeoCaching Bot..."
    docker-compose up -d
    log "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!"
    status
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ GeoCaching Bot..."
    docker-compose down
    log "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
restart() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ GeoCaching Bot..."
    docker-compose restart
    log "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!"
    status
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
logs() {
    echo -e "${BLUE}=== –õ–æ–≥–∏ GeoCaching Bot ===${NC}"
    docker-compose logs -f --tail=100 geocaching-bot
}

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
status() {
    echo -e "${BLUE}=== –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ ===${NC}"
    docker-compose ps
    
    echo -e "\n${BLUE}=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ ===${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" geocaching-bot 2>/dev/null || true
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ + –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
update() {
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GeoCaching Bot..."
    docker-compose down
    build
    start
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –û—á–∏—Å—Ç–∫–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ + —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤)
clean() {
    warn "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –æ–±—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã GeoCaching Bot!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
        docker-compose down -v --rmi all
        docker system prune -f
        log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    else
        log "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    fi
}

# –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö
backup() {
    BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ $BACKUP_DIR..."
    
    mkdir -p "$BACKUP_DIR"
    
    # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if [ -d "data" ]; then
        cp -r data "$BACKUP_DIR/"
        log "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
    fi
    

    
    # –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ -f ".env" ]; then
        cp .env "$BACKUP_DIR/"
        log "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞"
    fi
    
    log "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $BACKUP_DIR"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-}" in
    build)
        build "Dockerfile" "--no-cache"
        ;;
    build-fast)
        build_fast
        ;;
    build-optimized)
        build_optimized
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    logs)
        logs
        ;;
    status)
        status
        ;;
    update)
        update
        ;;
    clean)
        clean
        ;;
    backup)
        backup
        ;;
    setup)
        setup_env
        ;;
    *)
        echo -e "${BLUE}GeoCaching Bot - Deploy Script${NC}"
        echo
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
        echo "  build              - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑ (–ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞)"
        echo "  build-fast         - –ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"
        echo "  build-optimized    - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ (scratch –æ–±—Ä–∞–∑)"
        echo "  start              - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
        echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
        echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"
        echo "  update   - –û–±–Ω–æ–≤–∏—Ç—å (–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ + –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)"
        echo "  backup   - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö"
        echo "  setup    - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Ñ–∞–π–ª–∞"
        echo "  clean    - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–û–°–¢–û–†–û–ñ–ù–û!)"
        echo
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 start     # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"
        echo "  $0 logs      # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
        echo "  $0 status    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"
        ;;
esac 