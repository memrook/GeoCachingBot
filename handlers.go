package main

import (
	"database/sql"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		b.handleMessage(update.Message)
	} else if update.EditedMessage != nil {
		b.handleMessage(update.EditedMessage)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
	if userID == b.AdminID {
		b.handleAdminMessage(message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	b.handleUserMessage(message)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func (b *Bot) handleAdminMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	if message.IsCommand() {
		switch message.Command() {
		case "create":
			b.handleCreateCommand(userID)
		case "start":
			b.sendMessage(userID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! üëë\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞.")
		default:
			b.sendMessage(userID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—ç—à")
		}
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
	session, err := b.DB.GetAdminSession(userID)
	if err != nil {
		if err == sql.ErrNoRows {
			b.sendMessage(userID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞.")
			return
		}
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		return
	}

	switch session.Step {
	case "waiting_code":
		b.handleCodeWordInput(userID, message.Text)
	case "waiting_location":
		b.handleLocationInput(userID, message)
	case "waiting_photo":
		b.handlePhotoInput(userID, message)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create
func (b *Bot) handleCreateCommand(userID int64) {
	session := &AdminSession{
		UserID: userID,
		Step:   "waiting_code",
	}

	err := b.DB.CreateOrUpdateAdminSession(session)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	b.sendMessage(userID, "üîë –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫—ç—à–∞:")
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
func (b *Bot) handleCodeWordInput(userID int64, codeWord string) {
	codeWord = strings.TrimSpace(codeWord)
	if len(codeWord) < 3 {
		b.sendMessage(userID, "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
	_, err := b.DB.GetCacheByCodeWord(codeWord)
	if err == nil {
		b.sendMessage(userID, "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ:")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
	session := &AdminSession{
		UserID:   userID,
		Step:     "waiting_location",
		CodeWord: codeWord,
	}

	err = b.DB.CreateOrUpdateAdminSession(session)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	msg := tgbotapi.NewMessage(userID, "üìç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞, –≥–¥–µ –±—É–¥–µ—Ç —Å–ø—Ä—è—Ç–∞–Ω –∫—ç—à.")
	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonLocation("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"),
		),
	)
	msg.ReplyMarkup.OneTimeKeyboard = true

	b.API.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
func (b *Bot) handleLocationInput(userID int64, message *tgbotapi.Message) {
	if message.Location == nil {
		b.sendMessage(userID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
		return
	}

	latitude := float64(message.Location.Latitude)
	longitude := float64(message.Location.Longitude)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
	session, err := b.DB.GetAdminSession(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∑–∞–Ω–æ–≤–æ.")
		return
	}

	session.Step = "waiting_photo"
	session.Latitude = latitude
	session.Longitude = longitude

	err = b.DB.CreateOrUpdateAdminSession(session)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	msg := tgbotapi.NewMessage(userID, "üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞:")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.API.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
func (b *Bot) handlePhotoInput(userID int64, message *tgbotapi.Message) {
	if message.Photo == nil || len(message.Photo) == 0 {
		b.sendMessage(userID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
	session, err := b.DB.GetAdminSession(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –∑–∞–Ω–æ–≤–æ.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
	photo := message.Photo[len(message.Photo)-1]
	fileConfig := tgbotapi.FileConfig{FileID: photo.FileID}
	file, err := b.API.GetFile(fileConfig)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
		b.sendMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
	photoPath, err := b.downloadAndSavePhoto(file.FilePath, session.CodeWord)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: %v", err)
		b.sendMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	cache := &Cache{
		CodeWord:  session.CodeWord,
		Latitude:  session.Latitude,
		Longitude: session.Longitude,
		PhotoPath: photoPath,
		CreatedBy: userID,
	}

	err = b.DB.CreateCache(cache)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞: %v", err)
		b.sendMessage(userID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—ç—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
	b.DB.DeleteAdminSession(userID)

	successMsg := fmt.Sprintf("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\nüîë –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: %s\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: %.6f, %.6f\n\n–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∫—ç—à, –≤–≤–µ–¥—è –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ.",
		cache.CodeWord, cache.Latitude, cache.Longitude)

	b.sendMessage(userID, successMsg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) handleUserMessage(message *tgbotapi.Message) {
	userID := message.From.ID

	if message.IsCommand() {
		switch message.Command() {
		case "start":
			b.sendMessage(userID, "üó∫Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GeoCaching Bot!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—ç—à–∞:")
		case "stop":
			b.handleStopCommand(userID)
		default:
			b.sendMessage(userID, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—ç—à–∞ –∏–ª–∏ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞.")
		}
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è
	session, err := b.DB.GetUserSession(userID)
	if err != nil && err != sql.ErrNoRows {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		return
	}

	// –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
	if session != nil {
		b.handleLocationUpdate(userID, message)
		return
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –∏—â–µ–º –∫—ç—à –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É
	b.handleCacheSearch(userID, message.Text)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫—ç—à–∞ –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É
func (b *Bot) handleCacheSearch(userID int64, codeWord string) {
	codeWord = strings.TrimSpace(codeWord)
	if len(codeWord) < 3 {
		b.sendMessage(userID, "–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
		return
	}

	// –ò—â–µ–º –∫—ç—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	cache, err := b.DB.GetCacheByCodeWord(codeWord)
	if err != nil {
		if err == sql.ErrNoRows {
			b.sendMessage(userID, "üîç –ö—ç—à —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–≤—ã–º —Å–ª–æ–≤–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		} else {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—ç—à–∞: %v", err)
			b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		}
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
	userSession := &UserSession{
		UserID:   userID,
		CacheID:  cache.ID,
		IsActive: true,
	}

	err = b.DB.CreateOrUpdateUserSession(userSession)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		b.sendMessage(userID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
	msg := tgbotapi.NewMessage(userID, fmt.Sprintf("üéØ –ö—ç—à –Ω–∞–π–¥–µ–Ω: %s\n\nüìç –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ %d —á–∞—Å(–∞).",
		cache.CodeWord, b.Config.LiveLocationDurationHours))

	msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButtonLocation("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"),
		),
	)
	msg.ReplyMarkup.OneTimeKeyboard = true

	b.API.Send(msg)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
func (b *Bot) handleLocationUpdate(userID int64, message *tgbotapi.Message) {
	if message.Location == nil {
		b.sendMessage(userID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session, err := b.DB.GetUserSession(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞
	cache, err := b.DB.GetCacheByCodeWord("")
	if err != nil {
		// –ü–æ–ª—É—á–∞–µ–º –∫—ç—à –ø–æ ID –∏–∑ —Å–µ—Å—Å–∏–∏
		query := `SELECT id, code_word, latitude, longitude, photo_path, created_at, created_by 
				  FROM caches WHERE id = ?`

		cache = &Cache{}
		err = b.DB.db.QueryRow(query, session.CacheID).Scan(
			&cache.ID, &cache.CodeWord, &cache.Latitude, &cache.Longitude,
			&cache.PhotoPath, &cache.CreatedAt, &cache.CreatedBy,
		)

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∞: %v", err)
			return
		}
	}

	userLat := float64(message.Location.Latitude)
	userLon := float64(message.Location.Longitude)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ü–µ–ª–∏
	if isTargetReached(userLat, userLon, cache.Latitude, cache.Longitude, b.Config.TargetDistanceMeters) {
		b.handleTargetReached(userID, cache)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
	directionMsg := fmt.Sprintf("üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –∫—ç—à—É:\n\n%s",
		formatDirectionMessage(userLat, userLon, cache.Latitude, cache.Longitude))

	// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
	if session.LastMessageID == 0 {
		// –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
		msg := tgbotapi.NewMessage(userID, directionMsg)
		msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)

		sentMsg, err := b.API.Send(msg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			return
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
		session.LastLatitude = userLat
		session.LastLongitude = userLon
		session.LastMessageID = sentMsg.MessageID
		b.DB.CreateOrUpdateUserSession(session)
	} else {
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		edit := tgbotapi.NewEditMessageText(userID, session.LastMessageID, directionMsg)
		_, err := b.API.Send(edit)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
		session.LastLatitude = userLat
		session.LastLongitude = userLon
		b.DB.CreateOrUpdateUserSession(session)
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
func (b *Bot) handleTargetReached(userID int64, cache *Cache) {
	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
	b.DB.DeactivateUserSession(userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	congratsMsg := fmt.Sprintf("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –∫—ç—à: %s\n\nüì∑ –í–æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ—Å—Ç–∞:", cache.CodeWord)

	msg := tgbotapi.NewMessage(userID, congratsMsg)
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.API.Send(msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
	photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FilePath(cache.PhotoPath))
	photoMsg.Caption = "üèÜ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∏—Å–∫ –∫—ç—à–∞!"

	_, err := b.API.Send(photoMsg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: %v", err)
		b.sendMessage(userID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –º–µ—Å—Ç–∞.")
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
func (b *Bot) handleStopCommand(userID int64) {
	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Å–µ—Å—Å–∏—é
	err := b.DB.DeactivateUserSession(userID)
	if err != nil && err != sql.ErrNoRows {
		log.Printf("–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: %v", err)
	}

	msg := tgbotapi.NewMessage(userID, "üõë –ü–æ–∏—Å–∫ –∫—ç—à–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞.")
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
	b.API.Send(msg)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.API.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
func (b *Bot) downloadAndSavePhoto(filePath, codeWord string) (string, error) {
	// –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
	fileURL := fmt.Sprintf("https://api.telegram.org/file/bot%s/%s", b.API.Token, filePath)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	resp, err := http.Get(fileURL)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
	fileName := fmt.Sprintf("%s_%d%s", codeWord, time.Now().Unix(), filepath.Ext(filePath))
	fullPath := filepath.Join(b.Config.PhotoStoragePath, fileName)

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
	out, err := os.Create(fullPath)
	if err != nil {
		return "", err
	}
	defer out.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return "", err
	}

	return fullPath, nil
}
